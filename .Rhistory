sig2 <- 1/rgamma(1,a.sig + p/2,b.sig + .5*crossprod(w,w))
tau2 <- 1/rgamma(1,a.tau + m/2, b.tau + .5*crossprod(data - X%*%beta - K%*%w,data - X%*%beta - K%*%w))
w_cov <- chol2inv(chol(crossprod(K,K)/tau2 + diag(1/sig2,p)))
w_mean <- w_cov%*%crossprod(K,(data - X%*%beta))/tau2
w <- rmvn(1,w_mean,w_cov)
beta_cov_no_tau2 <- chol2inv(chol(crossprod(X,X)))
beta_mean <- beta_cov_no_tau2%*%crossprod(X,(data - K%*%w))
beta <- rmvn(1,beta_mean,beta_cov_no_tau2)
if(s > n_burn){
results$beta[,(s-n_burn)] <- beta
results$w[,(s-n_burn)] <- w
results$tau2_sig2_nu_phi[,(s-n_burn)] <- c(tau2,sig2,nu,phi)
}
setTxtProgressBar(pb,s)
}
list(p.beta.samples = results$beta, p.w.samples = results$w, p.theta.samples = results$tau2_sig2_nu_phi)
}
GPC_o3 <- Gaussian_process_convolution(data = o3$Arithmetic_Mean,locations = o3_utm@coords/1000,knots = utm_knots@coords/1000,
covars = o3$Elevation,n_iter = 1000, n_burn = 0,
priors = list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2]),
inits = list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 200),
tuning = list(tune_nu = 0.1^2,tune_phi = 5^2))
## Load data
load("~/GitHub/UCSC/Homework/245/HW6/Ozone_data.rda")
library(DanR)
##### Functions #####
bezier <- function(locs,knts,nu,phi){
require(fields)
distances <- rdist(locs,knts)
apply(distances,c(1,2),function(z){
if(z < phi){(1 - (z/phi)^2)^(nu)}else{0}
})
}
##### MCMC Function #####
Gaussian_process_convolution <- function(data, locations, knots, covars, n_iter, n_burn, priors, inits,tuning){
require(mvtnorm)
m <- length(data)
p <- nrow(knots)
X <- cbind(1,locations,covars)
q <- ncol(X)
n_left <- n_iter - n_burn
# attach(priors)
# attach(inits)
# attach(tuning)
results <- list(beta = matrix(NA,q,n_left),w = matrix(NA,p,n_left), tau2_sig2_nu_phi = matrix(NA,4,n_left))
accept <- 0
pb <- txtProgressBar(1,n_iter,style = 3)
for(s in 1:n_iter){
prop_nu_params <- gamma_params(nu,tune_nu)
prop_phi_params <- gamma_params(phi,tune_phi)
prop_nu <- rgamma(1,prop_nu_params[1],prop_nu_params[2])
prop_phi <- rgamma(1,prop_phi_params[1],prop_phi_params[2])
nu_params <- gamma_params(prop_nu,tune_nu)
phi_params <- gamma_params(prop_phi,tune_phi)
log_accept <- dmvnorm(data,X%*%beta + bezier(locations, knots, prop_nu,prop_phi)%*%w,tau2*diag(1,m),log = T) +
dgamma(nu,nu_params[1],nu_params[2],log=T) + dgamma(phi,phi_params[1],phi_params[2],log=T) -
dmvnorm(data,X%*%beta + bezier(locations, knots, nu,phi)%*%w,tau2*diag(1,m),log = T) -
dgamma(prop_nu,prop_nu_params[1],prop_nu_params[2],log=T) - dgamma(prop_phi,prop_phi_params[1],prop_phi_params[2],log=T)
if(log_accept > log(runif(1))){
accept <- accept + 1
nu <- prop_nu
phi <- prop_phi
}
K <- bezier(locations,knots,nu,phi)
sig2 <- 1/rgamma(1,a.sig + p/2,b.sig + .5*crossprod(w,w))
tau2 <- 1/rgamma(1,a.tau + m/2, b.tau + .5*crossprod(data - X%*%beta - K%*%w,data - X%*%beta - K%*%w))
w_cov <- chol2inv(chol(crossprod(K,K)/tau2 + diag(1/sig2,p)))
w_mean <- w_cov%*%crossprod(K,(data - X%*%beta))/tau2
w <- rmvn(1,w_mean,w_cov)
beta_cov_no_tau2 <- chol2inv(chol(crossprod(X,X)))
beta_mean <- beta_cov_no_tau2%*%crossprod(X,(data - K%*%w))
beta <- rmvn(1,beta_mean,beta_cov_no_tau2)
if(s > n_burn){
results$beta[,(s-n_burn)] <- beta
results$w[,(s-n_burn)] <- w
results$tau2_sig2_nu_phi[,(s-n_burn)] <- c(tau2,sig2,nu,phi)
}
setTxtProgressBar(pb,s)
}
list(p.beta.samples = results$beta, p.w.samples = results$w, p.theta.samples = results$tau2_sig2_nu_phi)
}
# data <- o3$Arithmetic_Mean
# locations <- o3_utm@coords/1000
# knots <- utm_knots@coords/1000
# covars <- o3$Elevation
# n_iter <- 1000
# n_burn <- 500
# tau_priors <- inv_gamma_params(4e-6,1e-6)
# sig_priors <- inv_gamma_params(1e-6,1e-6)
# priors <- list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2])
# inits <- list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 200)
# tuning <- list(tune_nu = 0.1^2,tune_phi = 5^2)
GPC_o3 <- Gaussian_process_convolution(data = o3$Arithmetic_Mean,locations = o3_utm@coords/1000,knots = utm_knots@coords/1000,
covars = o3$Elevation,n_iter = 100, n_burn = 0,
priors = list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2]),
inits = list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 200),
tuning = list(tune_nu = 0.1^2,tune_phi = 5^2))
GPC_o3 <- Gaussian_process_convolution(data = o3$Arithmetic_Mean,locations = o3_utm@coords/1000,knots = utm_knots@coords/1000,
covars = o3$Elevation,n_iter = 1000, n_burn = 500,
priors = list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2]),
inits = list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 200),
tuning = list(tune_nu = 0.1^2,tune_phi = 5^2))
plot(GPC_o3$p.beta.samples[1,],type ='l')
windows(width = 14,height=28)
par(mfrow=c(4,2))
apply(GPC_o3$p.beta.samples,1,function(z){plot(z,type='l')})
apply(GPC_o3$p.theta.samples,1,function(z){plot(z,type='l')})
GPC_o3 <- Gaussian_process_convolution(data = o3$Arithmetic_Mean,locations = o3_utm@coords/1000,knots = utm_knots@coords/1000,
covars = o3$Elevation,n_iter = 1000, n_burn = 500,
priors = list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2]),
inits = list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 100),
tuning = list(tune_nu = 0.1^2,tune_phi = 5^2))
windows(width = 14,height=28)
par(mfrow=c(4,2))
apply(GPC_o3$p.beta.samples,1,function(z){plot(z,type='l')})
apply(GPC_o3$p.theta.samples,1,function(z){plot(z,type='l')})
Gaussian_process_convolution <- function(data, locations, knots, covars, n_iter, n_burn, priors, inits,tuning){
require(mvtnorm)
m <- length(data)
p <- nrow(knots)
X <- cbind(1,locations,covars)
q <- ncol(X)
n_left <- n_iter - n_burn
# attach(priors)
# attach(inits)
# attach(tuning)
results <- list(beta = matrix(NA,q,n_left),w = matrix(NA,p,n_left), tau2_sig2_nu_phi = matrix(NA,4,n_left))
accept <- 0
pb <- txtProgressBar(1,n_iter,style = 3)
for(s in 1:n_iter){
prop_nu_params <- gamma_params(nu,tune_nu)
prop_phi_params <- gamma_params(phi,tune_phi)
prop_nu <- rgamma(1,prop_nu_params[1],prop_nu_params[2])
prop_phi <- rgamma(1,prop_phi_params[1],prop_phi_params[2])
nu_params <- gamma_params(prop_nu,tune_nu)
phi_params <- gamma_params(prop_phi,tune_phi)
log_accept <- dmvnorm(data,X%*%beta + bezier(locations, knots, prop_nu,prop_phi)%*%w,tau2*diag(1,m),log = T) +
dgamma(nu,nu_params[1],nu_params[2],log=T) + dgamma(phi,phi_params[1],phi_params[2],log=T) -
dmvnorm(data,X%*%beta + bezier(locations, knots, nu,phi)%*%w,tau2*diag(1,m),log = T) -
dgamma(prop_nu,prop_nu_params[1],prop_nu_params[2],log=T) - dgamma(prop_phi,prop_phi_params[1],prop_phi_params[2],log=T)
if(log_accept > log(runif(1))){
accept <- accept + 1
nu <- prop_nu
phi <- prop_phi
}
K <- bezier(locations,knots,nu,phi)
sig2 <- 1/rgamma(1,a.sig + p/2,b.sig + .5*crossprod(w,w))
tau2 <- 1/rgamma(1,a.tau + m/2, b.tau + .5*crossprod(data - X%*%beta - K%*%w,data - X%*%beta - K%*%w))
w_cov <- chol2inv(chol(crossprod(K,K)/tau2 + diag(1/sig2,p)))
w_mean <- w_cov%*%crossprod(K,(data - X%*%beta))/tau2
w <- rmvn(1,w_mean,w_cov)
beta_cov_no_tau2 <- chol2inv(chol(crossprod(X,X)))
beta_mean <- beta_cov_no_tau2%*%crossprod(X,(data - K%*%w))
beta <- rmvn(1,beta_mean,beta_cov_no_tau2)
if(s > n_burn){
results$beta[,(s-n_burn)] <- beta
results$w[,(s-n_burn)] <- w
results$tau2_sig2_nu_phi[,(s-n_burn)] <- c(tau2,sig2,nu,phi)
}
setTxtProgressBar(pb,s)
}
list(p.beta.samples = results$beta, p.w.samples = results$w, p.theta.samples = results$tau2_sig2_nu_phi,acceptance = accept)
}
GPC_o3 <- Gaussian_process_convolution(data = o3$Arithmetic_Mean,locations = o3_utm@coords/1000,knots = utm_knots@coords/1000,
covars = o3$Elevation,n_iter = 1000, n_burn = 500,
priors = list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2]),
inits = list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 100),
tuning = list(tune_nu = 0.1^2,tune_phi = 5^2))
Gaussian_process_convolution <- function(data, locations, knots, covars, n_iter, n_burn, priors, inits,tuning){
require(mvtnorm)
m <- length(data)
p <- nrow(knots)
X <- cbind(1,locations,covars)
q <- ncol(X)
n_left <- n_iter - n_burn
# attach(priors)
# attach(inits)
# attach(tuning)
results <- list(beta = matrix(NA,q,n_left),w = matrix(NA,p,n_left), tau2_sig2_nu_phi = matrix(NA,4,n_left))
accept <- 0
pb <- txtProgressBar(1,n_iter,style = 3)
for(s in 1:n_iter){
prop_nu_params <- gamma_params(nu,tune_nu)
prop_phi_params <- gamma_params(phi,tune_phi)
prop_nu <- rgamma(1,prop_nu_params[1],prop_nu_params[2])
prop_phi <- rgamma(1,prop_phi_params[1],prop_phi_params[2])
nu_params <- gamma_params(prop_nu,tune_nu)
phi_params <- gamma_params(prop_phi,tune_phi)
log_accept <- dmvnorm(data,X%*%beta + bezier(locations, knots, prop_nu,prop_phi)%*%w,tau2*diag(1,m),log = T) +
dgamma(nu,nu_params[1],nu_params[2],log=T) + dgamma(phi,phi_params[1],phi_params[2],log=T) -
dmvnorm(data,X%*%beta + bezier(locations, knots, nu,phi)%*%w,tau2*diag(1,m),log = T) -
dgamma(prop_nu,prop_nu_params[1],prop_nu_params[2],log=T) - dgamma(prop_phi,prop_phi_params[1],prop_phi_params[2],log=T)
if(log_accept > log(runif(1))){
accept <- accept + 1
nu <- prop_nu
phi <- prop_phi
}
K <- bezier(locations,knots,nu,phi)
sig2 <- 1/rgamma(1,a.sig + p/2,b.sig + .5*crossprod(w,w))
tau2 <- 1/rgamma(1,a.tau + m/2, b.tau + .5*crossprod(data - X%*%beta - K%*%w,data - X%*%beta - K%*%w))
w_cov <- chol2inv(chol(crossprod(K,K)/tau2 + diag(1/sig2,p)))
w_mean <- w_cov%*%crossprod(K,(data - X%*%beta))/tau2
w <- rmvn(1,w_mean,w_cov)
beta_cov_no_tau2 <- chol2inv(chol(crossprod(X,X)))
beta_mean <- beta_cov_no_tau2%*%crossprod(X,(data - K%*%w))
beta <- rmvn(1,beta_mean,beta_cov_no_tau2)
if(s > n_burn){
results$beta[,(s-n_burn)] <- beta
results$w[,(s-n_burn)] <- w
results$tau2_sig2_nu_phi[,(s-n_burn)] <- c(tau2,sig2,nu,phi)
}
setTxtProgressBar(pb,s)
}
list(p.beta.samples = results$beta, p.w.samples = results$w, p.theta.samples = results$tau2_sig2_nu_phi,acceptance = accept/n_iter)
}
GPC_o3 <- Gaussian_process_convolution(data = o3$Arithmetic_Mean,locations = o3_utm@coords/1000,knots = utm_knots@coords/1000,
covars = o3$Elevation,n_iter = 1000, n_burn = 500,
priors = list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2]),
inits = list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 100),
tuning = list(tune_nu = 0.1^2,tune_phi = 10^2))
windows(width = 14,height=28)
par(mfrow=c(4,2))
apply(GPC_o3$p.beta.samples,1,function(z){plot(z,type='l')})
apply(GPC_o3$p.theta.samples,1,function(z){plot(z,type='l')})
GPC_o3 <- Gaussian_process_convolution(data = o3$Arithmetic_Mean,locations = o3_utm@coords/1000,knots = utm_knots@coords/1000,
covars = o3$Elevation,n_iter = 1000, n_burn = 0,
priors = list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2]),
inits = list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 100),
tuning = list(tune_nu = 0.1^2,tune_phi = 5^2))
windows(width = 14,height=28)
par(mfrow=c(4,2))
apply(GPC_o3$p.beta.samples,1,function(z){plot(z,type='l')})
apply(GPC_o3$p.theta.samples,1,function(z){plot(z,type='l')})
dev.off()
library(MBA)
?mba.surf
res=100
obs_surf <- mba.surf(cbind(o3_utm@coords/1000,o3$Arithmetic_Mean),no.X=res,no.Y=res,extend = F)
image.plot(obs_surf)
obs_surf <- mba.surf(cbind(o3_utm@coords/1000,o3$Arithmetic_Mean),no.X=res,no.Y=res,extend = F)$xyz.est
image.plot(obs_surf)
ests <- apply(rbind(GPC_o3$p.beta.samples,GPC_o3$p.theta.samples[3:4,],GPC_o3$p.w.samples),2,function(z){
X%*%z[1:4] + bezier(o3_utm@coords/1000,utm_knots@coords/1000,z[5],z[6])%*%z[-(1:6)]
})
ests <- apply(ests,1,median)
summary(ests)
summary(o3$Arithmetic_Mean)
image.plot(est_surf)
est_surf <- mba.surf(cbind(o3_utm@coords/1000,ests),no.X=res,no.Y=res,extend = F)$xyz.est
image.plot(est_surf)
ests <- apply(rbind(GPC_o3$p.beta.samples,GPC_o3$p.theta.samples[3:4,],GPC_o3$p.w.samples),2,function(z){
X%*%z[1:4] #+ bezier(o3_utm@coords/1000,utm_knots@coords/1000,z[5],z[6])%*%z[-(1:6)]
})
ests <- apply(ests,1,median)
est_surf <- mba.surf(cbind(o3_utm@coords/1000,ests),no.X=res,no.Y=res,extend = F)$xyz.est
image.plot(est_surf)
GPC_o3 <- Gaussian_process_convolution(data = o3$Arithmetic_Mean,locations = o3_utm@coords/1000,knots = utm_knots@coords/1000,
covars = o3$Elevation,n_iter = 10000, n_burn = 5000,
priors = list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2]),
inits = list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 100),
tuning = list(tune_nu = 0.1^2,tune_phi = 5^2))
windows(width = 14,height=28)
par(mfrow=c(4,2))
apply(GPC_o3$p.beta.samples,1,function(z){plot(z,type='l')})
apply(GPC_o3$p.theta.samples,1,function(z){plot(z,type='l')})
dev.off()
ests <- apply(rbind(GPC_o3$p.beta.samples,GPC_o3$p.theta.samples[3:4,],GPC_o3$p.w.samples),2,function(z){
X%*%z[1:4] + bezier(o3_utm@coords/1000,utm_knots@coords/1000,z[5],z[6])%*%z[-(1:6)]
})
ests <- apply(ests,1,median)
est_surf <- mba.surf(cbind(o3_utm@coords/1000,ests),no.X=res,no.Y=res,extend = F)$xyz.est
image.plot(est_surf,xlim=c(165,1270),ylim=c(4250,5015))
lapply(borders,function(z){
lines(z@coords/1000,lwd=3)
})
image.plot(obs_surf,xlim=c(165,1270),ylim=c(4250,5015))
lapply(borders,function(z){
lines(z@coords/1000,lwd=3)
})
plot(utm_knots@coords/1000,pch=19)
lapply(borders,function(z){
lines(z@coords/1000,lwd=3)
})
plot(utm_knots@coords/1000,pch=19,xlim=c(165,1270),ylim=c(4250,5015))
lapply(borders,function(z){
lines(z@coords/1000,lwd=3)
})
plot(utm_knots@coords/1000,pch=19,xlim=c(165,1270),ylim=c(4250,5015),col='red')
lapply(borders,function(z){
lines(z@coords/1000,lwd=3)
})
windows(width = 14,height=28)
par(mfrow=c(4,2))
apply(GPC_o3$p.beta.samples,1,function(z){plot(z,type='l')})
apply(GPC_o3$p.theta.samples,1,function(z){plot(z,type='l')})
temp <- F
temp
if(temp == F)
1
temp == F
Gaussian_process_convolution <- function(data, locations, knots, covars, n_iter, n_burn, priors, inits, fix_nu_phi = F,tuning){
require(mvtnorm)
m <- length(data)
p <- nrow(knots)
X <- cbind(1,locations,covars)
q <- ncol(X)
n_left <- n_iter - n_burn
results <- list(beta = matrix(NA,q,n_left),w = matrix(NA,p,n_left), tau2_sig2_nu_phi = matrix(NA,4,n_left))
accept <- 0
if(fix_nu_phi) K <- bezier(locations,knots,nu,phi) # This is here for when we want to fix nu and phi
pb <- txtProgressBar(1,n_iter,style = 3)
for(s in 1:n_iter){
if(fix_nu_phi == F){
prop_nu_params <- gamma_params(nu,tune_nu)
prop_phi_params <- gamma_params(phi,tune_phi)
prop_nu <- rgamma(1,prop_nu_params[1],prop_nu_params[2])
prop_phi <- rgamma(1,prop_phi_params[1],prop_phi_params[2])
nu_params <- gamma_params(prop_nu,tune_nu)
phi_params <- gamma_params(prop_phi,tune_phi)
log_accept <- dmvnorm(data,X%*%beta + bezier(locations, knots, prop_nu,prop_phi)%*%w,tau2*diag(1,m),log = T) +
dgamma(nu,nu_params[1],nu_params[2],log=T) + dgamma(phi,phi_params[1],phi_params[2],log=T) -
dmvnorm(data,X%*%beta + bezier(locations, knots, nu,phi)%*%w,tau2*diag(1,m),log = T) -
dgamma(prop_nu,prop_nu_params[1],prop_nu_params[2],log=T) - dgamma(prop_phi,prop_phi_params[1],prop_phi_params[2],log=T)
if(log_accept > log(runif(1))){
accept <- accept + 1
nu <- prop_nu
phi <- prop_phi
}
K <- bezier(locations,knots,nu,phi)
}
sig2 <- 1/rgamma(1,a.sig + p/2,b.sig + .5*crossprod(w,w))
tau2 <- 1/rgamma(1,a.tau + m/2, b.tau + .5*crossprod(data - X%*%beta - K%*%w,data - X%*%beta - K%*%w))
w_cov <- chol2inv(chol(crossprod(K,K)/tau2 + diag(1/sig2,p)))
w_mean <- w_cov%*%crossprod(K,(data - X%*%beta))/tau2
w <- rmvn(1,w_mean,w_cov)
beta_cov_no_tau2 <- chol2inv(chol(crossprod(X,X)))
beta_mean <- beta_cov_no_tau2%*%crossprod(X,(data - K%*%w))
beta <- rmvn(1,beta_mean,beta_cov_no_tau2)
if(s > n_burn){
results$beta[,(s-n_burn)] <- beta
results$w[,(s-n_burn)] <- w
results$tau2_sig2_nu_phi[,(s-n_burn)] <- c(tau2,sig2,nu,phi)
}
setTxtProgressBar(pb,s)
}
list(p.beta.samples = results$beta, p.w.samples = results$w, p.theta.samples = results$tau2_sig2_nu_phi,acceptance = accept/n_iter)
}
GPC_o3 <- Gaussian_process_convolution(data = o3$Arithmetic_Mean,locations = o3_utm@coords/1000,knots = utm_knots@coords/1000,
covars = o3$Elevation,n_iter = 1000, n_burn = 500,
priors = list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2]),
inits = list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 100),
fix_nu_phi = T,tuning = list(tune_nu = 0.1^2,tune_phi = 5^2))
windows(width = 14,height=28)
par(mfrow=c(4,2))
apply(GPC_o3$p.beta.samples,1,function(z){plot(z,type='l')})
apply(GPC_o3$p.theta.samples,1,function(z){plot(z,type='l')})
load("~/GitHub/UCSC/Homework/245/HW6/Ozone_data.rda")
library(DanR)
##### Functions #####
bezier <- function(locs,knts,nu,phi){
require(fields)
distances <- rdist(locs,knts)
apply(distances,c(1,2),function(z){
if(z < phi){(1 - (z/phi)^2)^(nu)}else{0}
})
}
##### MCMC Function #####
Gaussian_process_convolution <- function(data, locations, knots, covars, n_iter, n_burn, priors, inits, fix_nu_phi = F,tuning){
require(mvtnorm)
m <- length(data)
p <- nrow(knots)
X <- cbind(1,locations,covars)
q <- ncol(X)
n_left <- n_iter - n_burn
results <- list(beta = matrix(NA,q,n_left),w = matrix(NA,p,n_left), tau2_sig2_nu_phi = matrix(NA,4,n_left))
accept <- 0
if(fix_nu_phi) K <- bezier(locations,knots,nu,phi) # This is here for when we want to fix nu and phi
pb <- txtProgressBar(1,n_iter,style = 3)
for(s in 1:n_iter){
if(fix_nu_phi == F){
prop_nu_params <- gamma_params(nu,tune_nu)
prop_phi_params <- gamma_params(phi,tune_phi)
prop_nu <- rgamma(1,prop_nu_params[1],prop_nu_params[2])
prop_phi <- rgamma(1,prop_phi_params[1],prop_phi_params[2])
nu_params <- gamma_params(prop_nu,tune_nu)
phi_params <- gamma_params(prop_phi,tune_phi)
log_accept <- dmvnorm(data,X%*%beta + bezier(locations, knots, prop_nu,prop_phi)%*%w,tau2*diag(1,m),log = T) +
dgamma(nu,nu_params[1],nu_params[2],log=T) + dgamma(phi,phi_params[1],phi_params[2],log=T) -
dmvnorm(data,X%*%beta + bezier(locations, knots, nu,phi)%*%w,tau2*diag(1,m),log = T) -
dgamma(prop_nu,prop_nu_params[1],prop_nu_params[2],log=T) - dgamma(prop_phi,prop_phi_params[1],prop_phi_params[2],log=T)
if(log_accept > log(runif(1))){
accept <- accept + 1
nu <- prop_nu
phi <- prop_phi
}
K <- bezier(locations,knots,nu,phi)
}
sig2 <- 1/rgamma(1,a.sig + p/2,b.sig + .5*crossprod(w,w))
tau2 <- 1/rgamma(1,a.tau + m/2, b.tau + .5*crossprod(data - X%*%beta - K%*%w,data - X%*%beta - K%*%w))
w_cov <- chol2inv(chol(crossprod(K,K)/tau2 + diag(1/sig2,p)))
w_mean <- w_cov%*%crossprod(K,(data - X%*%beta))/tau2
w <- rmvn(1,w_mean,w_cov)
beta_cov_no_tau2 <- chol2inv(chol(crossprod(X,X)))
beta_mean <- beta_cov_no_tau2%*%crossprod(X,(data - K%*%w))
beta <- rmvn(1,beta_mean,beta_cov_no_tau2)
if(s > n_burn){
results$beta[,(s-n_burn)] <- beta
results$w[,(s-n_burn)] <- w
results$tau2_sig2_nu_phi[,(s-n_burn)] <- c(tau2,sig2,nu,phi)
}
setTxtProgressBar(pb,s)
}
list(p.beta.samples = results$beta, p.w.samples = results$w, p.theta.samples = results$tau2_sig2_nu_phi,acceptance = accept/n_iter)
}
# data <- o3$Arithmetic_Mean
# locations <- o3_utm@coords/1000
# knots <- utm_knots@coords/1000
# covars <- o3$Elevation
# n_iter <- 1000
# n_burn <- 500
tau_priors <- inv_gamma_params(4e-6,1e-6)
sig_priors <- inv_gamma_params(1e-6,1e-6)
# priors <- list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2])
# inits <- list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 200)
# tuning <- list(tune_nu = 0.1^2,tune_phi = 5^2)
GPC_o3 <- Gaussian_process_convolution(data = o3$Arithmetic_Mean,locations = o3_utm@coords/1000,knots = utm_knots@coords/1000,
covars = o3$Elevation,n_iter = 1000, n_burn = 500,
priors = list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2]),
inits = list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 100),
fix_nu_phi = T,tuning = list(tune_nu = 0.1^2,tune_phi = 5^2))
windows(width = 14,height=28)
par(mfrow=c(4,2))
apply(GPC_o3$p.beta.samples,1,function(z){plot(z,type='l')})
apply(GPC_o3$p.theta.samples,1,function(z){plot(z,type='l')})
Gaussian_process_convolution <- function(data, locations, knots, covars, n_iter, n_burn, priors, inits, fix_nu_phi = F,tuning){
require(mvtnorm)
m <- length(data)
p <- nrow(knots)
X <- cbind(1,locations,covars)
q <- ncol(X)
n_left <- n_iter - n_burn
results <- list(beta = matrix(NA,q,n_left),w = matrix(NA,p,n_left), tau2_sig2_nu_phi = matrix(NA,4,n_left))
accept <- 0
if(fix_nu_phi) K <- bezier(locations,knots,nu,phi) # This is here for when we want to fix nu and phi
browser()
pb <- txtProgressBar(1,n_iter,style = 3)
for(s in 1:n_iter){
if(fix_nu_phi == F){
prop_nu_params <- gamma_params(nu,tune_nu)
prop_phi_params <- gamma_params(phi,tune_phi)
prop_nu <- rgamma(1,prop_nu_params[1],prop_nu_params[2])
prop_phi <- rgamma(1,prop_phi_params[1],prop_phi_params[2])
nu_params <- gamma_params(prop_nu,tune_nu)
phi_params <- gamma_params(prop_phi,tune_phi)
log_accept <- dmvnorm(data,X%*%beta + bezier(locations, knots, prop_nu,prop_phi)%*%w,tau2*diag(1,m),log = T) +
dgamma(nu,nu_params[1],nu_params[2],log=T) + dgamma(phi,phi_params[1],phi_params[2],log=T) -
dmvnorm(data,X%*%beta + bezier(locations, knots, nu,phi)%*%w,tau2*diag(1,m),log = T) -
dgamma(prop_nu,prop_nu_params[1],prop_nu_params[2],log=T) - dgamma(prop_phi,prop_phi_params[1],prop_phi_params[2],log=T)
if(log_accept > log(runif(1))){
accept <- accept + 1
nu <- prop_nu
phi <- prop_phi
}
K <- bezier(locations,knots,nu,phi)
}
sig2 <- 1/rgamma(1,a.sig + p/2,b.sig + .5*crossprod(w,w))
tau2 <- 1/rgamma(1,a.tau + m/2, b.tau + .5*crossprod(data - X%*%beta - K%*%w,data - X%*%beta - K%*%w))
w_cov <- chol2inv(chol(crossprod(K,K)/tau2 + diag(1/sig2,p)))
w_mean <- w_cov%*%crossprod(K,(data - X%*%beta))/tau2
w <- rmvn(1,w_mean,w_cov)
beta_cov_no_tau2 <- chol2inv(chol(crossprod(X,X)))
beta_mean <- beta_cov_no_tau2%*%crossprod(X,(data - K%*%w))
beta <- rmvn(1,beta_mean,beta_cov_no_tau2)
if(s > n_burn){
results$beta[,(s-n_burn)] <- beta
results$w[,(s-n_burn)] <- w
results$tau2_sig2_nu_phi[,(s-n_burn)] <- c(tau2,sig2,nu,phi)
}
setTxtProgressBar(pb,s)
}
list(p.beta.samples = results$beta, p.w.samples = results$w, p.theta.samples = results$tau2_sig2_nu_phi,acceptance = accept/n_iter)
}
GPC_o3 <- Gaussian_process_convolution(data = o3$Arithmetic_Mean,locations = o3_utm@coords/1000,knots = utm_knots@coords/1000,
covars = o3$Elevation,n_iter = 1000, n_burn = 500,
priors = list(a.tau = tau_priors[1],b.tau = tau_priors[2],a.sig = sig_priors[1],b.sig = sig_priors[2]),
inits = list(beta = c(mean(data),0,0,0),w = rep(0,nrow(knots)), tau2 = 4e-6, sig2 = 1e-6, nu = 1, phi = 100),
fix_nu_phi = T,tuning = list(tune_nu = 0.1^2,tune_phi = 5^2))
phi
inits
beta
w
tau2
sig2
nu
phi
load("~/GitHub/UCSC/Homework/245/HW6/Ozone_data.rda")
library(DanR)
bezier <- function(locs,knts,nu,phi){
require(fields)
distances <- rdist(locs,knts)
apply(distances,c(1,2),function(z){
if(z < phi){(1 - (z/phi)^2)^(nu)}else{0}
})
}
phi
load("~/GitHub/UCSC/Homework/245/HW6/Ozone_data.rda")
phi
rm(phi)
phi
phi
nu
phi
